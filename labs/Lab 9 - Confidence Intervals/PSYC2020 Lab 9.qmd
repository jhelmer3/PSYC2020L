---
title: "Confidence Intervals"
subtitle: "PSYC 2020-A01 / PSYC 6022-A01 | 2025-10-17 | Lab 9"
author: "Jessica Helmer"
format: 
  live-revealjs:
    slide-number: true
    show-slide-number: all
    css: PSYC2020L_styles.css
engine: knitr
webr:
  packages:
    - rio
    - datasets
execute:
  echo: true
width: 1200
cache: true
---

## Outline

* Assignment 8 Review
* Confidence Intervals
* One-Sample *t*-test

Learning objectives:  
**R:** CI and *t*-statistics in R

```{r, echo =F}
library(tidyverse)
```


## Assignment 8 Review

[placeholder for Assignment 8 review]


## Confidence Intervals

Most common: 95% CI

<div class="subsubpoint">○ Interpretation: If you were to take 100 samples, 95 CIs of your 100 samples will contain the true mean </div>

For standard normal,

| CI    | *z* cutoff | generally                                |
|-------|------------|------------------------------------------|
| 99.7% | [-3, 3]    | [$\bar{x} - 3 * SD$, $\bar{x} + 3 * SD$] |
| 95%   | [-2, 2]    | [$\bar{x} - 2 * SD$, $\bar{x} + 2 * SD$] |
| 68%   | [-1, 1]    | [$\bar{x} - 1 * SD$, $\bar{x} + 1 * SD$] |

::: callout-note
We say 2 here, but what number does the 95% CI really correspond to? [1.96]{.fragment}
:::


## Confidence Interval and Width

Confidence Level ($1 - \alpha$) can communicate uncertainty about your results

<div class="subpoint">○ Designated proportion of such intervals that will include the true population value </div>

<div class="subsubpoint">○ $\alpha =$ 0.01 for 99% CI </div>

<div class="subsubpoint">○ $\alpha =$ 0.05 for 95% CI </div>

:::: columns
::: {.column width=35%}
Confidence level proportional to confidence interval width
:::

::: {.column width=65%}
:::
::::

![](https://stats.libretexts.org/@api/deki/files/850/standard_deviation.png?revision=1&size=bestfit&width=784&height=398){.absolute bottom=0 right=0}


## CIs for Symmetric Distributions

When a distribution is symmetric, CIs for that distribution are also symmetric

<div class="subpoint">○ Includes normal (e.g., *z*-) distribution </div>

<div class="subpoint">○ *t* distribution </div>

![](https://miro.medium.com/v2/resize:fit:1400/1*Mk6EV8oIB1jlbQWcRzNRdg.png)


## Cutoff *Z*-Values Example

Say you want to find the cutoff *z* values for some confidence interval

Two examples: 95% CI and 97.3% CI (one typical, one as exercise)

::: fragment
We want the $\alpha = 1 -$ confidence level piece to be equal on both sides
:::

:::: {.columns .fragment}
::: column
**95% CI**
$\alpha = 1 - .95 = 5\%$ on both sides 

So $.05 / 2 = .025$ on each side

Need value for $.025$ and $.95 + .025$ ($[.025, .975]$)
```{r}
qnorm(c(.025, .975))
```
:::

::: column
**97.3% CI**
$\alpha = 1 - .973 = 2.7\%$ on both sides 

So $.027 / 2 = .0135$ on each side

Need value for $.0135$ and $.95 + .0135$ ($[.0135, .9865]$)
```{r}
qnorm(c(.0135, 0.9865))
```
:::
::::

::: fragment
Which one has a higher confidence level? Which one has a larger width?
:::


## Confidence Interval Generally

Derived with sample mean ($\bar{x}$) and standard error ($\frac{\sigma}{\sqrt n}$)

$CI = \bar{x} \pm z \frac{\sigma}{\sqrt n}$ or

$CI = [\bar{x} - z \frac{\sigma}{\sqrt n}, \bar{x} + z \frac{\sigma}{\sqrt n}]$

::: callout-note
## Food for Thought

With this formula, we would only use the positive version of the *z* cutoff, so that the lower bound ends up lower than the mean and the higher bound ends up higher. You can also think instead as both adding the *z* cutoff---it just ends up becoming a minus sign because the lower bound has a negative *z* cutoff.
:::


## Confidence Interval Example

Let's find a 95% confidence interval of the mean for iris Petal Length

```{r}
head(iris$Petal.Length)

x_bar <- mean(iris$Petal.Length)
x_sd <- sd(iris$Petal.Length)
n <- length(iris$Petal.Length) # although remember to be thinking about missing data

z_cutoff <- qnorm(.975)

Petal.Length.CI <- c(x_bar - z_cutoff * x_sd / sqrt(n), x_bar + z_cutoff * x_sd / sqrt(n))
Petal.Length.CI
```

[If we collected samples of petal length many times, we would expect the interval [3.47, 4.04] to contain the true population mean of petal length 95% of the time.]{.fragment}


## Confidence Interval Example

Let's find a 80% confidence interval of the mean for iris Sepal Length

```{r}
head(iris$Sepal.Length)

Sepal.Length.CI <- c(mean(iris$Petal.Length) - qnorm(.9) * sd(iris$Petal.Length) /
                       sqrt(sum(!is.na(iris$Sepal.Length))),
                     
                     mean(iris$Petal.Length) + qnorm(.9) * sd(iris$Petal.Length) /
                       sqrt(sum(!is.na(iris$Sepal.Length))))
Sepal.Length.CI
```

[If we collected samples of petal length many times, we would expect the interval [3.57, 3.94] to contain the true population mean of petal length 95% of the time.]{.fragment}


## Confidence Intervals and NHST

If a 95% confidence interval does not contain a value, that is mathematically equivalent to it being "significantly different" from that value.

E.g., if your null hypothesis $H_0$ was that the mean of petal length is no different from an expected population mean of 3.3, would you reject or accept the null hypothesis?

```{r}
Petal.Length.CI
```

[We would reject the null hypothesis because the 95% CI does not include 3.3.]{.fragment}


# From *Z* to *T*: No longer normal


## *Z*- vs. *T*-Distribution

*T*-distribution has thicker tails

As df increases, it looks more like a standard normal distribution

With df = $\infty$, exactly follows a normal distribution (so approximates with large df)


## *Z*- vs. *T*-Distribution

```{r}
#| echo: false
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(normal = dnorm(x),
         t1 = dt(x, 1),
         t2 = dt(x, 2),
         t5 = dt(x, 5),
         t10 = dt(x, 10)) |>
  ggplot(aes(x = x)) +
  geomtextpath::geom_textline(aes(y = normal, label = "standard normal"),
                              hjust = .1, size = 6, linewidth = 1.5, color = "gray60") +
  coord_cartesian(clip = "off", xlim = c(-5, 5), expand = F) +
  guides(y = "none") +
  labs(x = NULL, y = NULL) +
  theme_classic(base_size = 16) 
```


## *Z*- vs. *T*-Distribution

```{r}
#| echo: false
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(normal = dnorm(x),
         t1 = dt(x, 1),
         t2 = dt(x, 2),
         t5 = dt(x, 5),
         t10 = dt(x, 10)) |>
  ggplot(aes(x = x)) +
  geomtextpath::geom_textline(aes(y = normal, label = "standard normal"),
                              hjust = .1, size = 6, linewidth = 1.5, color = "gray60") +
  geomtextpath::geom_textline(aes(y = t1, label = "t(df=1)"),
                              hjust = .28, size = 6, linewidth = 1.5, color = "skyblue") +
  coord_cartesian(clip = "off", xlim = c(-5, 5), expand = F) +
  guides(y = "none") +
  labs(x = NULL, y = NULL) +
  theme_classic(base_size = 16) 
```

## *Z*- vs. *T*-Distribution

```{r}
#| echo: false
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(normal = dnorm(x),
         t1 = dt(x, 1),
         t2 = dt(x, 2),
         t5 = dt(x, 5),
         t10 = dt(x, 10)) |>
  ggplot(aes(x = x)) +
  geomtextpath::geom_textline(aes(y = normal, label = "standard normal"),
                              hjust = .1, size = 6, linewidth = 1.5, color = "gray60") +
  geomtextpath::geom_textline(aes(y = t1, label = "t(df=1)"),
                              hjust = .28, size = 6, linewidth = 1.5, color = "skyblue") +
  geomtextpath::geom_textline(aes(y = t2, label = "t(df=2)"),
                              hjust = .35, size = 6, linewidth = 1.5, color = "steelblue") +
  coord_cartesian(clip = "off", xlim = c(-5, 5), expand = F) +
  guides(y = "none") +
  labs(x = NULL, y = NULL) +
  theme_classic(base_size = 16) 
```


## *Z*- vs. *T*-Distribution

```{r}
#| echo: false
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(normal = dnorm(x),
         t1 = dt(x, 1),
         t2 = dt(x, 2),
         t5 = dt(x, 5),
         t10 = dt(x, 10)) |>
  ggplot(aes(x = x)) +
  geomtextpath::geom_textline(aes(y = normal, label = "standard normal"),
                              hjust = .1, size = 6, linewidth = 1.5, color = "gray60") +
  geomtextpath::geom_textline(aes(y = t1, label = "t(df=1)"),
                              hjust = .28, size = 6, linewidth = 1.5, color = "skyblue") +
  geomtextpath::geom_textline(aes(y = t2, label = "t(df=2)"),
                              hjust = .35, size = 6, linewidth = 1.5, color = "steelblue") +
  geomtextpath::geom_textline(aes(y = t10, label = "t(df=10)"), 
                            hjust = .4, size = 6, linewidth = 1.5, color = "steelblue4") +
  coord_cartesian(clip = "off", xlim = c(-5, 5), expand = F) +
  guides(y = "none") +
  labs(x = NULL, y = NULL) +
  theme_classic(base_size = 16) 
```


## *Z*- vs. *T*-Distribution

```{r}
#| echo: false
data.frame(x = seq(-5, 5, length.out = 1000)) |>
  mutate(normal = dnorm(x),
         t1 = dt(x, 1),
         t2 = dt(x, 2),
         t5 = dt(x, 5),
         t10 = dt(x, 10),
         t100 = dt(x, 100)) |>
  ggplot(aes(x = x)) +
  geomtextpath::geom_textline(aes(y = normal, label = "standard normal"),
                              hjust = .1, size = 6, linewidth = 1.5, color = "gray60") +
  geomtextpath::geom_textline(aes(y = t1, label = "t(df=1)"),
                              hjust = .28, size = 6, linewidth = 1.5, color = "skyblue") +
  geomtextpath::geom_textline(aes(y = t2, label = "t(df=2)"),
                              hjust = .35, size = 6, linewidth = 1.5, color = "steelblue") +
  geomtextpath::geom_textline(aes(y = t10, label = "t(df=10)"), 
                            hjust = .4, size = 6, linewidth = 1.5, color = "steelblue4") +
  geomtextpath::geom_textline(aes(y = t100, label = "t(df=100)"), 
                            hjust = .48, size = 6, linewidth = 1.5, color = "royalblue4") +
  coord_cartesian(clip = "off", xlim = c(-5, 5), expand = F) +
  guides(y = "none") +
  labs(x = NULL, y = NULL) +
  theme_classic(base_size = 16) 
```


## *T*-Test: How many tails?

Need to consider whether to use a "one-tail" or "two-tail" *t*-test.

:::: columns
::: {.column}
#### One-Tail (One-Sided)

We want to test whether something is lower or higher than a value, but **not both**

Only one limit
:::

::: {.column}
#### Two-Tails (Two-Sided)

We want to test whether something is either lower or higher than a value

Two limits (like how we've been doing *z*-tests
:::
::::


## *T*-Test: How many tails?

Need to consider whether to use a "one-tail" or "two-tail" *t*-test.

:::: columns
::: {.column}
#### One-Tail (One-Sided)

```{r}
#| echo: false
#| fig-width: 3.5
#| fig-height: 3.5
dat <- data.frame(x = seq(-5, 5, length.out = 1000)) |>
                  mutate(y = dnorm(x, 0, 1))

dat |>
  ggplot(aes(x = x, y = y)) +
  geom_area(data = dat |> filter(x < qnorm(.05)), aes(x = x, y = y), fill = 'salmon', alpha = .8) +
  geom_line() +
  geomtextpath::geom_textline(aes(label = "5%"),
                              hjust = .12, vjust = 0, size = 8, color = "salmon", linewidth = NA) +
  annotate("text", label = "Lower tail test", x = -5, y = .38, hjust = 0) +
  coord_cartesian(expand = F, clip = "off") +
  guides(y = "none") +
  labs(y = NULL, x = NULL) +
  theme_classic(base_size = 16)
```
:::

::: {.column}
#### Two-Tails (Two-Sided)

```{r}
#| echo: false
#| fig-width: 3.5
#| fig-height: 3.5
dat <- data.frame(x = seq(-5, 5, length.out = 1000)) |>
                  mutate(y = dnorm(x, 0, 1))

dat |>
  ggplot(aes(x = x, y = y)) +
  geom_area(data = dat |> filter(x < qnorm(.025)), aes(x = x, y = y), fill = 'salmon', alpha = .8) +
  geom_area(data = dat |> filter(x > qnorm(.975)), aes(x = x, y = y), fill = 'salmon', alpha = .8) +
  geom_line() +
  geomtextpath::geom_textline(aes(label = "2.5%"),
                              hjust = .12, vjust = 0, size = 8, color = "salmon", linewidth = NA) +
  geomtextpath::geom_textline(aes(label = "2.5%"),
                              hjust = .88, vjust = 0, size = 8, color = "salmon", linewidth = NA) +
  coord_cartesian(expand = F) +
  guides(y = "none", clip = "off") +
  labs(y = NULL, x = NULL) +
  theme_classic(base_size = 16)
```
:::
::::


## *T*-Test: How many tails?

Notice that two-tailed tests are harder to "beat."

```{r}
#| echo: false
#| fig-width: 7
#| fig-height: 3
dat |>
  ggplot(aes(x = x, y = y)) +
  geom_area(data = dat |> filter(x < qnorm(.05)), aes(x = x, y = y), fill = 'salmon', alpha = .5) +
  geom_area(data = dat |> filter(x < qnorm(.025)), aes(x = x, y = y), fill = 'skyblue3', alpha = .6) +
  geom_area(data = dat |> filter(x > qnorm(.975)), aes(x = x, y = y), fill = 'skyblue3', alpha = .6) +
  geom_line() +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.025), label = "2.5% cutoff"),
                              hjust = .15, size = 6, color = "skyblue3", linewidth = 1.5) +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.05), label = "5% cutoff"),
                              hjust = .85, size = 6, color = "salmon", linewidth = 1.5) +
  scale_x_continuous(breaks = round(c(qnorm(.025), qnorm(.05), 0, qnorm(.975)), 2)) +
  coord_cartesian(expand = F, clip = "off") +
  guides(y = "none", x = NULL) +
  labs(y = NULL) +
  theme_classic(base_size = 12)
```


## Cutoff *T*-Values Example

Say you want to find the cutoff *t* values

Two examples: t(df = 3) and t(df = 37) for $\alpha = .05$

Both upper one-tailed and two-tailed

::: fragment
Which will have the larger magnitude cutoff values?
:::

:::: {.columns .fragment}
::: column
**One-Tailed**

All of our $\alpha = .05$ goes on the upper side

Need a cutoff for $.95$
```{r}
qt(p = .95, df = 3, lower.tail = F)

qt(p = .95, df = 37, lower.tail = F)
```
$t_{crit}(3) = -2.35$

$t_{crit}(37) = -1.69$
:::

::: column
**Two-Tailed**

$\alpha = 1 - .95 = 5\%$ on both sides 

So $.05 / 2 = .025$ on each side

Need value for $.025$ and $.95 + .025$ ($[.025, .975]$)
```{r}
qt(p = c(.025, .975), df = 3)

qt(p = c(.025, .975), df = 37)
```
$t_{crit}(3) = [-3.18, -3.18]$

$t_{crit}(37) = [-2.03  2.06]$
:::
::::

::: fragment
Symmetrical cutoffs, so can also just flip sign
:::


## One-Sample *T*-Test Generally

Asks "is there a question between our sample and the population?"

Derived with sample mean ($\bar{x}$), population mean ($\mu$), and standard error ($\frac{\bar{\sigma}}{\sqrt n}$)

$$t = \frac{\bar{x} - \mu}{\frac{\bar{\sigma}}{\sqrt{n}}}$$

With a *t*-test, we don't have a known population SD ($\sigma$), so we use the SD we observe in our sample $\bar{\sigma}$

Get our *t*-statistic and compare it to a critical *t* cutoff value

## *T*-Test Example

Let's say a researcher claims the average highway miles per gallon across all cars is 30mpg. They collect a sample of 234 cars and would like you to test this. We do not know the population standard deviation.

::: fragment
One- or two-tailed?
:::

```{r}
head(mpg$hwy)

x_bar <- mean(mpg$hwy)
x_sd <- sd(mpg$hwy)
n <- length(mpg$hwy) # although remember to be thinking about missing data
df <- n - 1

t_cutoff <- qt(.975, df)

hwy_t_stat <- (x_bar - 30) / (x_sd / sqrt(n))
hwy_t_stat
```

[Our observed *t*-statistic exceeds our cutoff *t*-statistic, so we reject the null.]{.fragment}


## *T*-Test Function

Alternatively, we can use `t.test(x)`

<div class="subpoint">○ `x` = vector of numeric data </div>

<div class="subpoint">○ `mu` = hypothesized population mean (default is 0) </div>

<div class="subpoint">○ `alternative` = one of `"two.sided"`, `"less"`, `"greater"` (default is `"two.sided"`) </div>

```{r}
t.test(mpg$hwy, mu = 30, alternative = "two.sided")
```

[placeholder for output interpretation]


## *T*-Test Example

Let's say a different researcher claims the average **city** miles per gallon across all cars is 30mpg. They collect a sample of 234 cars You are confident they are wrong---you think it is certainly less than that. We do not know the population standard deviation.

::: fragment
One- or two-tailed?
:::

```{r}
t.test(mpg$cty, mu = 30, alternative = "less")
```

[placeholder for output interpretation]


## *T*-Test and NHST

Remember, even when the statistic is small, for two-tailed tests (because negative), we reject when we exceed the bounds of our critical value

For one-tailed tests, it needs to exceed the bound of that tail's cutoff

::: fragment

Reject or accept null?

```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 3
#| layout-ncol: 3
dat |>
  ggplot(aes(x = x, y = y)) +
  geom_area(data = dat |> filter(x < qnorm(.025)), aes(x = x, y = y), fill = 'skyblue3', alpha = .6) +
  geom_area(data = dat |> filter(x > qnorm(.975)), aes(x = x, y = y), fill = 'skyblue3', alpha = .6) +
  geom_line() +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.025), label = "2.5% cutoff"),
                              hjust = .5, size = 6, color = "skyblue3", linewidth = 1.5) +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.975), label = "2.5% cutoff"),
                              hjust = .5, size = 6, color = "skyblue3", linewidth = 1.5) +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.001), label = "observed t-stat"),
                              hjust = .5, size = 6, color = "gray", linewidth = 1.5) +
  scale_x_continuous(breaks = round(c(qnorm(.001), qnorm(.025), 0, qnorm(.975)), 2)) +
  coord_cartesian(expand = F, clip = "off") +
  guides(y = "none", x = NULL) +
  labs(y = NULL) +
  theme_classic(base_size = 12)

dat |>
  ggplot(aes(x = x, y = y)) +
  geom_area(data = dat |> filter(x < qnorm(.025)), aes(x = x, y = y), fill = 'skyblue3', alpha = .6) +
  geom_area(data = dat |> filter(x > qnorm(.975)), aes(x = x, y = y), fill = 'skyblue3', alpha = .6) +
  geom_line() +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.025), label = "2.5% cutoff"),
                              hjust = .5, size = 6, color = "skyblue3", linewidth = 1.5) +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.975), label = "2.5% cutoff"),
                              hjust = .5, size = 6, color = "skyblue3", linewidth = 1.5) +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.2), label = "observed t-stat"),
                              hjust = .5, size = 6, color = "gray", linewidth = 1.5) +
  scale_x_continuous(breaks = round(c(qnorm(.2), qnorm(.025), 0, qnorm(.975)), 2)) +
  coord_cartesian(expand = F, clip = "off") +
  guides(y = "none", x = NULL) +
  labs(y = NULL) +
  theme_classic(base_size = 12)

dat |>
  ggplot(aes(x = x, y = y)) +
  geom_area(data = dat |> filter(x < qnorm(.05)), aes(x = x, y = y), fill = 'skyblue3', alpha = .6) +
  geom_line() +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.05), label = "5% cutoff"),
                              hjust = .5, size = 6, color = "skyblue3", linewidth = 1.5) +
  geomtextpath::geom_textvline(aes(xintercept = qnorm(.99999), label = "observed t-stat"),
                              hjust = .5, size = 6, color = "gray", linewidth = 1.5) +
  scale_x_continuous(breaks = round(c(qnorm(.99999), qnorm(.025), 0, qnorm(.975)), 2)) +
  coord_cartesian(expand = F, clip = "off") +
  guides(y = "none", x = NULL) +
  labs(y = NULL) +
  theme_classic(base_size = 12)
```
:::

## Assignment 9





















