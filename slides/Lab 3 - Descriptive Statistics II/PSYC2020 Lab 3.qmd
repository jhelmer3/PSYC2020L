---
title: "Psychological Statistics Lab 3"
subtitle: "PSYC 2020-A01 / PSYC 6022-A01 | 2025-09-04 | Descriptive Statistics II"
author: "Jessica Helmer"
format: 
  live-revealjs:
    slide-number: true
    show-slide-number: all
    css: PSYC2020L_styles.css
engine: knitr
width: 1200
---

## Outline

* Assignment 2 Review
* Labeling data
* Aggregating data
* Visualizing aggregates
* Weighted mean

Learning objectives:

Stats: Review measures of dispersion

R: 

```{r}

knitr::opts_chunk$set(echo = T)

```

## Labeling Data

:::: {.columns}

::: {.column}
Adding meaningful labels or categories to your dataset.

Useful for organizing and interpreting your data.

<div class="subpoint">○ E.g., Adding labels like “Pass” or “Fail” based on test scores. </div>
:::

::: {.column}
```{r, echo=F}
data <- data.frame("id" = 1:5,
           "order" = sample(1:3, 5, replace = T),
           "rating" = sample(1:5, 5, replace = T))

data
```
<br>

::: fragment
```{r, echo=F}
data$order <- ifelse(data$order == 1, "Pizza",
                    ifelse(data$order == 2, "Pasta",
                           ifelse(data$order == 3, "Salad", NA)))
data$rating <- ifelse(data$rating == 1, "Very Poor",
                      ifelse(data$rating == 2, "Poor",
                             ifelse(data$rating == 3, "Fair",
                                    ifelse(data$rating == 4, "Good",
                                           ifelse(data$rating == 5, "Excellent", NA)))))

data

```
:::
:::

::::

## Key Functions for Labeling Data

:::: {.columns}

::: {.column width=66%}
```{r}
#| code-line-numbers: false
scores <- c(85, 60, 45, 70, 50)
```
:::


::: {.column width=33%}
```{r}
#| code-line-numbers: false
gender <- c(1, 2, 1, 2, 2)
```
:::

::::

:::: {.columns style="font-size: 70%"}

::: {.column width=33%}
`ifelse(test, yes, no)`  
For simple conditional labeling
:::

::: {.column width=33%}
`cut()`  
For creating bins or ranges
:::

::: {.column width=33%}
`factor()`  
Convert numeric or character data into labeled categories
:::

::::

:::: {.columns style="font-size: 70%"}

::: {.column width=33%}
```{r}
#| code-line-numbers: false
# Labeling as Pass/Fail
labels <- ifelse(scores >= 60,
                 "Pass", "Fail")

# Combining into a data frame
data <- data.frame(Scores = scores,
                   Label = labels)

data
```
:::

::: {.column width=33%}
```{r}
#| code-line-numbers: false
# Creating bins
categories <- cut(scores,
                  breaks = c(0, 50, 70, 100),
                  labels = c("Low", "Medium",
                             "High"))

# Combining into a data frame
data <- data.frame(Scores = scores,
                   Category = categories)

data
```
:::

::: {.column width=33%}
```{r}
#| code-line-numbers: false
# Converting to factor with labels
gender_labeled <- factor(gender,
                         levels = c(1, 2),
                         labels = c("Male",
                                    "Female"))

# Combine into a data frame
data <- data.frame(gender,
                   gender_labeled)

data
```
:::

::::

## Data Aggregation

Aggregation involves summarizing or grouping data based on certain variables.

Commonly used to calculate summary statistics like mean, variance, or sum for each group.

:::: {.columns}

::: {.column .fragment}
Benefits: 
<div class="subpoint">○ Data summary </div>
<div class="subpoint">○ Data simplification </div>
<div class="subpoint">○ Statistical analysis </div>
<div class="subpoint">○ Trend identification </div>
<div class="subpoint">○ Data privacy </div>
<div class="subpoint">○ Data-driven decisions </div>
:::

::: {.column .fragment}
`aggregate(x ~ group, FUN)`
:::

::::

## Data Aggregation Example

```{webr}
# average Sepal Length by iris species?


```

## Data Aggregation Visualization

Why visualize aggregated data?
<div class="subpoint">○ Makes group-level insights easier to interpret. </div>
<div class="subpoint">○ Highlights patterns, trends, and outliers in grouped data </div>
<div class="subpoint">○ Helps communicate findings effectively </div>

![](us_hospitals.png)

## Testing

::::: {.columns}

::: {.column width=60%}
You can make histograms with the hist() function

<div class="subpoint">**Required arguments:** </div>
<div class="subsubpoint">○ x = vector (variable) you want to plot (remember the \$ function!) </div>
<div class="subpoint">**Optional arguments:** </div>

:::: {.columns}

::: {.column}
<div class="subsubpoint">○ breaks: number of bins </div>
<div class="subsubpoint">○ main: title </div>
<div class="subsubpoint">○ xlab: label for x-axis </div>
<div class="subsubpoint">○ ylab: label for y-axis </div>
:::

::: {.column}
<div class="subsubpoint">○ col: color for bars </div>
<div class="subsubpoint">○ xlim: range for x-axis </div>
<div class="subsubpoint">○ ylim: range for y-axis </div>
<div class="subsubpoint">○ prob: T/F, y-axis proportion instead of frequency </div>
:::

::::

If you do not set specific values for non-essential subarguments, it will use the default
:::

::: {.column width=40%}
::: {.panel-tabset}
### Plot
```{r, echo=F}
#| fig-width: 6
#| fig-height: 6
hist(iris$Sepal.Length,
     breaks = 7,
     main = "Histogram of Sepal Length",
     xlab = "Sepal Length",
     xlim = c(3, 9),
     border = "white",
     col = "skyblue")
```
### Code
```{r, eval=F}
hist(iris$Sepal.Length,
     breaks = 7,
     main = "Histogram of Sepal Length",
     xlab = "Sepal Length",
     xlim = c(3, 9),
     border = "white",
     col = "skyblue")
```
:::
:::

:::::







