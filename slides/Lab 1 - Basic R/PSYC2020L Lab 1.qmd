---
title: "Psychological Statistics Lab 1"
subtitle: "PSYC 2020-A01 / PSYC 6022-A01 | 2025-08-22 | Basic R"
author: "Jessica Helmer"
format:
  revealjs:
    slide-number: true
    show-slide-number: all
    css: PSYC2020L_styles.css
width: 1200
footer: "[jhelmer3.github.io/PSYC2020L](https://jhelmer3.github.io/PSYC2020L/)"
---

## Outline

-   Introductions!
-   Lab Syllabus
-   What is R?
-   Today's Dataset
-   R's Layout
-   R Basics

```{r, echo = F}

knitr::opts_chunk$set(echo = T)

```

## Instructor Introduction

Hi! I'm Jessica Helmer. I'm a second-year PhD student in Quantitative Psychology.

My research focuses on the measurement and modeling of decision-making processes.

:::: {.columns}
::: {.column}
::: subpoint
○ Email: [jhelmer3\@gatech.edu](mailto:jhelmer3\@gatech.edu) 
:::
::: subpoint
○ Office: J.S. Coon Rm 240 
:::
::: subpoint
○ Office Hours: Wednesdays, 10–11am, my office / [Zoom](https://gatech.zoom.us/j/98522819670?pwd=O8cCyj7iDdw005aHbXXdB7rBH1BYX6.1)
:::
::: subsubpoint
○ Or by appointment
:::
:::

::: {.column .fragment}
![](lily.jpg){width=250}
![](sheba.jpg){width=250}
:::
::::

## What You Can Expect From Me

I am available as a resource! Please feel free to reach out / email anytime if you need help, have questions about the lab, or have any suggestions or feedback for the class.

I encourage helping each other / collaboration during the lab! While working on assignments, I will try to answer everyone's questions as soon as I can. but if someone near you is confused and you can help, go for it!

## Student Introductions

-   Name
-   Year at Georgia Tech
-   Major
-   Coding Experience?
-   Anything else!

## Lab Assignments

Students are expected to attend and participate in all scheduled labs.

We will have a lab lecture and assignment each week (barring institute holidays).

Students are expected to work on the activity during the scheduled lab time.

Lab assignments are due on Canvas at 11:59pm the same day they are distributed.

We will not be able to accept late lab assignments!

Assignment distributed after lecture (with plenty of time to complete!)

## Lab Assignments

**Always** offer a few words of explanation for questions in the assignment.

::: subpoint
○ Output alone will not get full credit.
:::

Please submit both the knitted (.html) and the RMarkdown (.rmd) file.

::: subpoint
○ Without your R code, we will not be able to give partial credit if the result is incorrect.
:::

**Always** provide R output for every analysis carried out.

::: subpoint
○ If the assignment asks you to make a plot, include that plot in your submission (not just the code).
:::

Graded 0--100, equally weighted to compose 20% of your PSYC 2020 / PSYC 6022 grade

## About AI

AI can be a very helpful tool for learning coding! Feel free to use it to clarify concepts, troubleshoot code, or syntax explanations

However, for the assignments, your code needs to be your own.

It is important to practice and gain experiencing coding independently.

## Lab Resources

:::: {.columns}
::: {.column width="30%"}
[Introduction to Data Exploration and Analysis with R (IDEAR)](https://bookdown.org/mikemahoney218/IDEAR/)
:::

::: {.column width="30%"}
[R for Data Science (2e)](https://r4ds.hadley.nz/)

[![](r4de.jpg)](https://r4ds.hadley.nz/)
:::

::: {.column width="30%"}
[YaRrr! The Pirate’s Guide to R](https://bookdown.org/ndphillips/YaRrr/)

[![](yarrr.jpg)](https://bookdown.org/ndphillips/YaRrr/)
:::
::::

All free, open source materials for learning R

------------------------------------------------------------------------

### Any questions on syllabus, assignments, materials?

------------------------------------------------------------------------

## What is R?

Open source coding language, primarily used for data analysis and data science

![](R.png){.absolute width="200" top="140" left="1000"}

Coding (per the IDEAR book):

::: fragment
"Giving very specific instructions to a very stupid machine."
:::

</br>

::: fragment
```{r}

print("Hello, World!")

```
:::

## Why R?

Because R is a programming language, you can make your own codes / functions as commands

R has many "packages" for statistical functions

R is open source: you can see the exact code that underlies the functions you use

::: subpoint
○ And if you'd like, you can modify it
:::

## What is RStudio?

An interface for R

Helps keep R files organize

Helps "knit" code, output, and text to create reports

## Installing R

We need to download two things:

[R](https://cloud.r-project.org/) and [RStudio](https://posit.co/download/rstudio-desktop/#download)

R is the language, RStudio is an Interactive Development Environment (IDE)

We will use R through RStudio

## RStudio Introduction

Files, Plots, Packages

Environment, History

Console

## R Console

```{r}

2 + 4

```

::: fragment
```{r}

2 + 4 / 4

```
:::

::: fragment
PEMDAS!
:::

::: fragment
```{r}

2 ^ 3

```
:::

::: fragment
```{r}

8 %% 3

```
:::

## Vectors

```{r}

c(2, 4, 6)

```

::: fragment
```{r}

c(1, "hello!", "Georgia Tech")

```
:::

::: fragment
`c()` function

-   Stands for "combine"
:::

::: fragment
Matrix algebra!

```{r}

c(1, 2, 3) / 3

```

```{r}

c(1, 2, 3) / c(1, 2, 3)

```
:::

## Data Types

```{r}

c(1, 2, 3)

```

```{r}

c(1, "hello!", "Georgia Tech")

```

::: fragment
Quotes around `1` in the first vector, not in the second
:::

::: fragment
Vectors can only hold one type of data!

-   Numeric

-   Character
:::

::: fragment
```{r}

c(1, 2, 3) / 3

```

```{r}
#| error: true

c(1, "hello!", "Georgia Tech") / 3

```
:::

Error because we cannot divide characters

## Data Types

```{r}

TRUE

```

::: fragment
```{r}

c(1, "hello!", TRUE)

```
:::

::: fragment
```{r}

c(TRUE, FALSE)

```
:::

## Data Types: Logical (boolean)

```{r}

6 > 4

```

::: fragment
```{r}

12 / 2 < 6

```
:::

::::: {.columns}
::: {.column .fragment}
The `<`, `>`, and `<=` symbols are *logical operators*

Logical data handled like binary numeric data

```{r}

TRUE == 1

```

```{r}

FALSE + 3

```
:::

:::: {.column .fragment}
`TRUE` and `FALSE` can be abbreviated as `T` and `F`

```{r}

TRUE == T

```

```{r}

FALSE == F

```

::: fragment
Harder to tell apart, so be careful!
:::
::::
:::::

## Practice Break!

```{r}
#| output-location: fragment

2 + 2

```

::: fragment
```{r}
#| output-location: fragment

2 + 2 / 2

```
:::

::: fragment
```{r}
#| output-location: fragment

2 + 2 / 2 ^ 2

```
:::

::: fragment
```{r}
#| output-location: fragment
#| error: true

c("hello!", 2) / 2

```
:::

## Variable Assignment

In R, we can assign objects (including functions) to some variable with the *assignment operator* `<-`

```{r}

# assign variable a the value 1
a <- 1

# print a
a

```

## Variable Assignment

```{r}

a <- c(1, 2, 3)
a

```

```{r}

a <- c("Hello, world!")
a

```

Every time we reassign a value to `a`, it holds that new value

Overwrites previous value!

## Variable Assignment

Overwriting can mess stuff up!

![](goback.jpg)

## Variables in Statistics: Numeric vs. Categorical

### Numeric

::: subpoint
○ Quantitative
:::

::: subpoint
○ Values describing a measurable quantity as a number
:::

::: subpoint
○ “How many” or “how much”
:::

### Categorical

::: subpoint
○ Distinguish distinct elements or entities
:::

::: subpoint
○ Name, gender, ethnicity...
:::

## Four Types of Measurement

::::::::::::: columns
::::::: column
### Nominal

::: subpoint
○ Variable that represents categories without any inherent order.
:::

::: subpoint
○ E.g., types of fruit (“apple,"“orange,” “banana”).
:::

### Ordinal

::: subpoint
○ Variable that represents categories with a meaningful order.
:::

::: subpoint
○ For example, levels of satisfaction (“very unsatisfied,” “unsatisfied,” “neutral,” “satisfied,” “very satisfied”)
:::
:::::::

::::::: column
### Discrete

::: subpoint
○ Variable that can only take specific values.
:::

::: subpoint
○ Think of things you can count, like the number of people in a room or the number of apples in a basket.
:::

### Continuous

::: subpoint
○ Variable that can take any value within a range.
:::

::: subpoint
○ Think of things you can measure, like height or time.
:::
:::::::
:::::::::::::

<!-- ## Statistical Variables in R -->

<!-- | Nominal | Ordinal | Discrete | Continuous | -->

<!-- |---------|---------|----------|------------| -->

<!-- | `factor` | `factor` | `integer` | `float` | -->

<!-- | `character` | | | | -->

## Dataframes

Table of data

Can make by hand with the `data.frame()` function:

```{r}

data.frame(x = c(1, 2, 3),
           y = c("a", "b", "c"),
           z = c(TRUE, FALSE, TRUE))

```

Shift+Enter to go to new line on Console

Most of the time, we import data (and don't manually type it in)

In console, can press up arrow to reload last line of code

## Dataframes

If you already have vector objects saved, you don't have to type them in again

```{r}
a <- c(1, 2, 3)
b <- c(2, 3, 4)
c <- c(3, 4, 5)
```

<br>

:::::: columns
::: {.column width="30%"}
```{r}
data.frame(a = a,
           b = b,
           c = c)
```
:::

::: {.column width="30%"}
```{r}
data.frame(a, b, c)

```
:::

::: {.column width="30%"}
```{r}
data.frame(A = a, b, c)
```
:::
::::::

## R Projects

RStudio's way of helping organizing files, scripts, etc.

I strongly recommend this!!

::: subpoint
○ File \> New Project
:::

::: subpoint
○ If you don't already have a folder associated with this class, "New Directory"
:::

::: subpoint
○ If you do, "Existing Directory"
:::

All R Scripts under the same project share a *working directory*

<dir class="subpoint">

○ Location of files

</dir>

`getwd()` tells us the location of our working directory

`setwd("C:/Users/Desktop/R Example")` sets the working directory

Or, `here::here()` lets us do relative directories (my favorite!)

::: subpoint
○ Just use the command at the top of the file to see where your directory is
:::

## R Scripts

R script files end with .R

### How to Create an R Script File

1)  Manually

::: subpoint
File \> New File \> R Script
:::

2)  Shortcut

::: subpoint
Ctrl + Shift + N
:::

## RMarkdown

::::: columns
::: column
A way of typesetting R code into a document

End in .rmd

File \> New File \> RMarkdown...

Input Title, Author, Date

How we will complete assignments
:::

::: column
![](rmd.png)
:::
:::::

## Insert a Chunk

How to insert an RMarkdown chunk in RStudio

1)  Manually:

::: subpoint
○ Type ```` ```{r} ````.
:::

::: subpoint
○ Add your R code.
:::

::: subpoint
○ Close the chunk with ```` ``` ````.
:::

2)  Shortcut:

::: subpoint
○ Use the shortcut Ctrl + Alt + I (Windows) or Cmd + Option + I.
:::

3)  Button

![](chunkinsert.png)

## Run a Chunk

How to run RMarkdown code chunks in RStudio

1)  Shortcut:

::: subpoint
○ Use the shortcut Ctrl + Enter (Windows) or Ctrl + Return (Mac)
:::

2)  Button

![](chunkrun.png)

Can also select a variable and run it to see its output (helpful!)

## Clearing Environement and Restarting R

Important to ensure that your code isn't unintentionally relying on hidden objects in the environement

::: subpoint
○ E.g., you created an object, deleted the line to create it, but R still sees it there
:::

When you try to knit your file, it will clear, restart, and run all code

::: subpoint
○ In the previous situation, your code would error
:::

Clearing your environment and restarting R frequently helps you avoid this

## Clearing Environement and Restarting R

::::::: columns
::: column
### How to Clear Your Environment

1)  Button

![](envclear.png)
:::

::::: column
### How to Restart R

1)  Manually:

::: subpoint
○ Session \> Restart R.
:::

2)  Shortcut:

::: subpoint
○ Use the shortcut Ctrl + Shift + F10 (Windows) or Cmd + Shift + F10.
:::
:::::
:::::::

## Tips for RMarkdown!

Run code often to ensure it's working

Restart R frequently

Knitting will combine text, syntax, results, and output into a Word, PDF, or HTML file

![](knit.png)

## Today's Dataset

`iris` dataset has measurements of 150 flowers, preloaded from R

:::: {.columns style="font-size:70%"}
::: {.column}
`head()` function shows first few rows of a dataframe

```{r}

head(iris)

```
:::

::: {.column}
`tail()` shows last few rows

Can specify how many rows you want

```{r}

tail(iris, n = 3)

```
:::
::::

## Saving Work

Press Ctrl + S frequently to save your work!!

Can also press the save icon in the top left

![](save.png)

## Suggested R Workflow

1)  Open a new script or RMarkdown file

2)  Check (and set if needed) your working directory

3)  Load any packages you'll be working with

4)  Write your code

5)  Knit and save your file

## Data Visualization

Let's make our first plot!

`$` operator references columns within a dataframe

```{r, eval=T}
#| fig-width: 6
#| fig-height: 4
plot(iris$Sepal.Length, iris$Sepal.Width)
```

::: fragment
Do we like this plot?
:::

## Assignment 1

Objectives:

-   Do some basic R!

-   Get familiar with RMarkdown
